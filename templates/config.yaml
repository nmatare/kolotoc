---
{{- $workerNum := .Values.worker.number -}}
{{- $name := include "kolotoc.fullname" . }}
{{- $slots := 1 }}
{{- if index .Values.worker.resources "nvidia.com/gpu" }}
{{- $slots := index .Values.worker.resources "nvidia.com/gpu" }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "kolotoc.fullname" . }}
  labels:
    heritage: {{ .Release.Deployment | quote }}
    release: {{ .Release.Name | quote }}
    chart: {{ template "kolotoc.chart" . }}
    app: {{ template "kolotoc.fullname" . }}
data:
  hostfile.config: |
    {{ $name }}-scheduler slots=0
    {{- range $i, $none := until (int $workerNum) }}
    {{ $name }}-{{ $i }}.{{ $name }} slots={{ $slots }}
    {{- end }}
  
  ssh.readiness: |
    #!/bin/bash
    set -xev
    ssh localhost ls

  scheduler.run: |
    #!/bin/bash
    set -x
    sleep 5

    mkdir -p /root/.ssh
    rm -f /root/.ssh/config
    touch /root/.ssh/config

    set +e
    yes | cp /etc/secret-volume/id_rsa /root/.ssh/id_rsa
    yes | cp /etc/secret-volume/authorized_keys /root/.ssh/authorized_keys
    set -e

    echo "Port $HOST_SSH_PORT" > /root/.ssh/config
    sed -i "s/^Port.*/Port $HOST_SSH_PORT /g" /etc/ssh/sshd_config
    echo "StrictHostKeyChecking no" >> /root/.ssh/config
    /usr/sbin/sshd

    source activate $PROJECT_NAME
    ldconfig $CUDA_STUB_LOCATION
    echo "GIT_SSH_COMMAND=${GIT_SSH_COMMAND}" >> /etc/environment
    echo "UPDATE_REPO_COMMAND=${UPDATE_REPO_COMMAND}" >> /etc/environment

    $CONDA_PREFIX/bin/python -m ipykernel install --user \
        --name $PROJECT_NAME  --display-name "$PROJECT_NAME-python" 

    echo "IRkernel::installspec(user=FALSE, displayname=/"R$PROJECT_NAME/")" | \
    $CONDA_PREFIX/bin/R --slave  

    jupyter lab --allow-root --port=$JUPYTER_LAB_PORT &
    
    tensorboard --port=$TENSORBOARD_PORT \
      --logdir=/root/$PROJECT_NAME/checkpoints/ &
   
    dask-scheduler --port=$DASK_SCHEDULER_PORT --bokeh-port=$BOKEH_PORT &

    function update(){
      mpiexec --allow-run-as-root \
      --mca orte_keep_fqdn_hostnames t \
      --timeout 30 \
      --hostfile /kolotoc/generated/hostfile \
        /bin/bash -c "$UPDATE_REPO_COMMAND"
    }

    function goto(){
      workers="$(($(wc -l /kolotoc/generated/hostfile | cut -d ' ' -f1) - 1))"
      if [[ -z "$1" ]]; then
        echo "Please specify a worker-rank"
        exit
      fi
      
      if [[ "$1" -ge "$workers" ]]; then
        echo "Worker-rank-$1 does not exist"
        exit
      fi
      echo "Going to worker-rank-$1. "
      ssh "$(tail -n +$(($1 + 2)) /kolotoc/generated/hostfile | cut -d ' ' -f1)"
    }

    declare -f update goto >> /root/.bashrc
    update &

    if [ $# -eq 0 ]; then
        sleep infinity
      else
        bash -c "$*"
    fi

  scheduler.waitWorkerReady: |
    #!/bin/bash
    set -xev

    function updateSSHPort() {
      mkdir -p /root/.ssh
      rm -f /root/.ssh/config
      touch /root/.ssh/config

      if [ -n "$HOST_SSH_PORT" ]; then
        echo "Port $HOST_SSH_PORT" > /root/.ssh/config
        echo "StrictHostKeyChecking no" >> /root/.ssh/config
      fi
    }

    function runCheckSSH() {
      set +e
      yes | cp /etc/secret-volume/id_rsa /root/.ssh/id_rsa
      yes | cp /etc/secret-volume/authorized_keys /root/.ssh/authorized_keys
      set -e
      
      for i in `cat $1 | awk '{print $(1)}'`;do
        if [[ "$i" != *"scheduler" ]];then
          retry 30 ssh -o ConnectTimeout=10 -q $i exit
        fi
      done
    }

    function retry() {
        local n=0;local try=$1
        local cmd="${@: 2}"
        [[ $# -le 1 ]] && {
            echo "Usage $0 <retry_number> <Command>";
        }
        set +e
        until [[ $n -ge $try ]]
        do
          $cmd && break || {
                  echo "Command Fail.."
                  ((n++))
                  echo "retry $n :: [$cmd]"
                  sleep 1;
                  }
        done
        $cmd
        if [ $? -ne 0 ]; then
          exit 1
        fi
        set -e   
    }
   
    updateSSHPort
    runCheckSSH $1

  worker.run: |
    #!/bin/bash
    function retry() {
        local n=0;local try=$1
        local cmd="${@: 2}"
        [[ $# -le 1 ]] && {
            echo "Usage $0 <retry_number> <Command>";
        }
        set +e
        until [[ $n -ge $try ]]
        do
          $cmd && break || {
                  echo "Command Fail.."
                  ((n++))
                  echo "retry $n :: [$cmd]"
                  sleep 1;
                  }
        done
        $cmd
        if [ $? -ne 0 ]; then
          exit 1
        fi
        set -e   
    }

    set -x

    mkdir -p /root/.ssh
    rm -f /root/.ssh/config
    touch /root/.ssh/config

    set +e
    yes | cp /etc/secret-volume/id_rsa /root/.ssh/id_rsa
    yes | cp /etc/secret-volume/authorized_keys /root/.ssh/authorized_keys
    set -e

    echo "Port $HOST_SSH_PORT" > /root/.ssh/config
    sed -i "s/^Port.*/Port $HOST_SSH_PORT /g" /etc/ssh/sshd_config
    echo "StrictHostKeyChecking no" >> /root/.ssh/config
    /usr/sbin/sshd

    export DASK_SCHEDULER_ADDRESS="$(head -n 1 /kolotoc/generated/hostfile | cut -d ' ' -f1)"
    retry 30 ssh -o ConnectTimeout=2 -q $DASK_SCHEDULER_ADDRESS exit

    if [[ "$DASK_WORKER_GPU" -gt 0 ]]; then
      export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
      export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/nvidia/bin:/usr/local/cuda/bin/${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
      
      echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> /etc/environment
      sed -i "/\<PATH\>/cPATH=$PATH" /etc/environment
    else 
      ldconfig $CUDA_STUB_LOCATION
    fi

    echo "DASK_SCHEDULER_ADDRESS=${DASK_SCHEDULER_ADDRESS}" >> /etc/environment
    echo "GIT_SSH_COMMAND=${GIT_SSH_COMMAND}" >> /etc/environment

    source activate $PROJECT_NAME
    for worker in $(seq 1 "$DASK_WORKER_PROCESS"); do 
      echo "Launching dask-worker process $worker of $DASK_WORKER_PROCESS"
      dask-worker $DASK_SCHEDULER_ADDRESS:$DASK_SCHEDULER_PORT \
        --name=worker-rank-$(hostname -A | cut -d'-' -f5 | grep -o '[0-9]')-$worker-$(hostname -i) \
        --resources="CPU=$DASK_THREADS_PER_PROCESS GPU=$DASK_WORKER_GPU MEM=$DASK_WORKER_MEM" \
        --memory-limit="$DASK_WORKER_MEM" \
        --local-directory=/tmp \
        --nanny \
        --nthreads="$DASK_THREADS_PER_PROCESS" &
    done;
    sleep infinity
